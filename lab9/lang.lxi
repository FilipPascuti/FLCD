%{
#include <stdio.h>
#include <string.h>
#include "y.tab.h"

int lines = 0;
%}

%option noyywrap
%option caseless


ID          [a-zA-Z][a-zA-Z0-9_]*
ZERO        [0]
NUMBER      [+-]?[1-9][0-9]*|{ZERO}
STRING		\"[a-zA-Z0-9]*\"
CONST		{STRING}|{NUMBER}

%%

int         {printf("Reserved word: %s\n", yytext); return INTEGER;}
string      {printf("Reserved word: %s\n", yytext); return STRING;}
if          {printf("Reserved word: %s\n", yytext); return IF;}
else        {printf("Reserved word: %s\n", yytext); return ELSE;}
while       {printf("Reserved word: %s\n", yytext); return WHILE;}
readInt     {printf("Reserved word: %s\n", yytext); return READINT;}
read        {printf("Reserved word: %s\n", yytext); return READ;}
print       {printf("Reserved word: %s\n", yytext); return PRINT;}

{ID}	{printf( "Identifier: %s\n", yytext ); return ID;}

{CONST}	{printf( "Constant: %s\n", yytext ); return CONST;}


";"	    {printf( "Separator: %s\n", yytext ); return SEMI_COLON;}
","	    {printf( "Separator: %s\n", yytext ); return COMMA;}
"{"	    {printf( "Separator: %s\n", yytext ); return OPEN_CURLY_BRACKET;}
"}"	    {printf( "Separator: %s\n", yytext ); return CLOSED_CURLY_BRACKET;}
"("	    {printf( "Separator: %s\n", yytext ); return OPEN_ROUND_BRACKET;}
")"	    {printf( "Separator: %s\n", yytext ); return CLOSED_ROUND_BRACKET;}
"["	    {printf( "Separator: %s\n", yytext ); return OPEN_SQUARE_BRACKET;}
"]"	    {printf( "Separator: %s\n", yytext ); return CLOSED_SQUARE_BRACKET;}

"+"	    {printf( "Operator: %s\n", yytext ); return ADD;}
"-"	    {printf( "Operator: %s\n", yytext ); return SUB;}
"*"	    {printf( "Operator: %s\n", yytext ); return MUL;}
"/"	    {printf( "Operator: %s\n", yytext ); return DIV;}
"%"	    {printf( "Operator: %s\n", yytext ); return MOD;}
"<"	    {printf( "Operator: %s\n", yytext ); return LT;}
">"	    {printf( "Operator: %s\n", yytext ); return GT;}
"<="	{printf( "Operator: %s\n", yytext ); return LTE;}
">="	{printf( "Operator: %s\n", yytext ); return GTE;}
"!="	{printf( "Operator: %s\n", yytext ); return NOT_EQUAL;}
"=="	{printf( "Operator: %s\n", yytext ); return EQUAL;}
"="     {printf( "Operator: %s\n", yytext ); return ASSIGN;}
"&&"    {printf( "Operator: %s\n", yytext ); return AND;}
"||"    {printf( "Operator: %s\n", yytext ); return OR;}

[ \t]+  	{}
[\n]+ {lines++;}

%%
